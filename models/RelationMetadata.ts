/* tslint:disable */
/* eslint-disable */
/**
 * OpenFGA
 * A high performance and flexible authorization/permission engine built for developers and inspired by Google Zanzibar.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@openfga.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RelationReference } from './RelationReference';
import {
    RelationReferenceFromJSON,
    RelationReferenceFromJSONTyped,
    RelationReferenceToJSON,
} from './RelationReference';
import type { SourceInfo } from './SourceInfo';
import {
    SourceInfoFromJSON,
    SourceInfoFromJSONTyped,
    SourceInfoToJSON,
} from './SourceInfo';

/**
 * 
 * @export
 * @interface RelationMetadata
 */
export interface RelationMetadata {
    /**
     * 
     * @type {Array<RelationReference>}
     * @memberof RelationMetadata
     */
    directlyRelatedUserTypes?: Array<RelationReference>;
    /**
     * 
     * @type {string}
     * @memberof RelationMetadata
     */
    module?: string;
    /**
     * 
     * @type {SourceInfo}
     * @memberof RelationMetadata
     */
    sourceInfo?: SourceInfo;
}

/**
 * Check if a given object implements the RelationMetadata interface.
 */
export function instanceOfRelationMetadata(value: object): boolean {
    return true;
}

export function RelationMetadataFromJSON(json: any): RelationMetadata {
    return RelationMetadataFromJSONTyped(json, false);
}

export function RelationMetadataFromJSONTyped(json: any, ignoreDiscriminator: boolean): RelationMetadata {
    if (json == null) {
        return json;
    }
    return {
        
        'directlyRelatedUserTypes': json['directly_related_user_types'] == null ? undefined : ((json['directly_related_user_types'] as Array<any>).map(RelationReferenceFromJSON)),
        'module': json['module'] == null ? undefined : json['module'],
        'sourceInfo': json['source_info'] == null ? undefined : SourceInfoFromJSON(json['source_info']),
    };
}

export function RelationMetadataToJSON(value?: RelationMetadata | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'directly_related_user_types': value['directlyRelatedUserTypes'] == null ? undefined : ((value['directlyRelatedUserTypes'] as Array<any>).map(RelationReferenceToJSON)),
        'module': value['module'],
        'source_info': SourceInfoToJSON(value['sourceInfo']),
    };
}

