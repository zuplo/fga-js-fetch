/* tslint:disable */
/* eslint-disable */
/**
 * OpenFGA
 * A high performance and flexible authorization/permission engine built for developers and inspired by Google Zanzibar.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@openfga.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Computed } from './Computed';
import {
    ComputedFromJSON,
    ComputedFromJSONTyped,
    ComputedToJSON,
} from './Computed';
import type { Users } from './Users';
import {
    UsersFromJSON,
    UsersFromJSONTyped,
    UsersToJSON,
} from './Users';
import type { UsersetTreeTupleToUserset } from './UsersetTreeTupleToUserset';
import {
    UsersetTreeTupleToUsersetFromJSON,
    UsersetTreeTupleToUsersetFromJSONTyped,
    UsersetTreeTupleToUsersetToJSON,
} from './UsersetTreeTupleToUserset';

/**
 * A leaf node contains either
 * - a set of users (which may be individual users, or usersets
 *   referencing other relations)
 * - a computed node, which is the result of a computed userset
 *   value in the authorization model
 * - a tupleToUserset nodes, containing the result of expanding
 *   a tupleToUserset value in a authorization model.
 * @export
 * @interface Leaf
 */
export interface Leaf {
    /**
     * 
     * @type {Users}
     * @memberof Leaf
     */
    users?: Users;
    /**
     * 
     * @type {Computed}
     * @memberof Leaf
     */
    computed?: Computed;
    /**
     * 
     * @type {UsersetTreeTupleToUserset}
     * @memberof Leaf
     */
    tupleToUserset?: UsersetTreeTupleToUserset;
}

/**
 * Check if a given object implements the Leaf interface.
 */
export function instanceOfLeaf(value: object): boolean {
    return true;
}

export function LeafFromJSON(json: any): Leaf {
    return LeafFromJSONTyped(json, false);
}

export function LeafFromJSONTyped(json: any, ignoreDiscriminator: boolean): Leaf {
    if (json == null) {
        return json;
    }
    return {
        
        'users': json['users'] == null ? undefined : UsersFromJSON(json['users']),
        'computed': json['computed'] == null ? undefined : ComputedFromJSON(json['computed']),
        'tupleToUserset': json['tupleToUserset'] == null ? undefined : UsersetTreeTupleToUsersetFromJSON(json['tupleToUserset']),
    };
}

export function LeafToJSON(value?: Leaf | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'users': UsersToJSON(value['users']),
        'computed': ComputedToJSON(value['computed']),
        'tupleToUserset': UsersetTreeTupleToUsersetToJSON(value['tupleToUserset']),
    };
}

