/* tslint:disable */
/* eslint-disable */
/**
 * OpenFGA
 * A high performance and flexible authorization/permission engine built for developers and inspired by Google Zanzibar.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@openfga.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Difference } from './Difference';
import {
    DifferenceFromJSON,
    DifferenceFromJSONTyped,
    DifferenceToJSON,
} from './Difference';
import type { ObjectRelation } from './ObjectRelation';
import {
    ObjectRelationFromJSON,
    ObjectRelationFromJSONTyped,
    ObjectRelationToJSON,
} from './ObjectRelation';
import type { TupleToUserset } from './TupleToUserset';
import {
    TupleToUsersetFromJSON,
    TupleToUsersetFromJSONTyped,
    TupleToUsersetToJSON,
} from './TupleToUserset';
import type { Usersets } from './Usersets';
import {
    UsersetsFromJSON,
    UsersetsFromJSONTyped,
    UsersetsToJSON,
} from './Usersets';

/**
 * 
 * @export
 * @interface Userset
 */
export interface Userset {
    /**
     * A DirectUserset is a sentinel message for referencing
     * the direct members specified by an object/relation mapping.
     * @type {object}
     * @memberof Userset
     */
    _this?: object;
    /**
     * 
     * @type {ObjectRelation}
     * @memberof Userset
     */
    computedUserset?: ObjectRelation;
    /**
     * 
     * @type {TupleToUserset}
     * @memberof Userset
     */
    tupleToUserset?: TupleToUserset;
    /**
     * 
     * @type {Usersets}
     * @memberof Userset
     */
    union?: Usersets;
    /**
     * 
     * @type {Usersets}
     * @memberof Userset
     */
    intersection?: Usersets;
    /**
     * 
     * @type {Difference}
     * @memberof Userset
     */
    difference?: Difference;
}

/**
 * Check if a given object implements the Userset interface.
 */
export function instanceOfUserset(value: object): boolean {
    return true;
}

export function UsersetFromJSON(json: any): Userset {
    return UsersetFromJSONTyped(json, false);
}

export function UsersetFromJSONTyped(json: any, ignoreDiscriminator: boolean): Userset {
    if (json == null) {
        return json;
    }
    return {
        
        '_this': json['this'] == null ? undefined : json['this'],
        'computedUserset': json['computedUserset'] == null ? undefined : ObjectRelationFromJSON(json['computedUserset']),
        'tupleToUserset': json['tupleToUserset'] == null ? undefined : TupleToUsersetFromJSON(json['tupleToUserset']),
        'union': json['union'] == null ? undefined : UsersetsFromJSON(json['union']),
        'intersection': json['intersection'] == null ? undefined : UsersetsFromJSON(json['intersection']),
        'difference': json['difference'] == null ? undefined : DifferenceFromJSON(json['difference']),
    };
}

export function UsersetToJSON(value?: Userset | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'this': value['_this'],
        'computedUserset': ObjectRelationToJSON(value['computedUserset']),
        'tupleToUserset': TupleToUsersetToJSON(value['tupleToUserset']),
        'union': UsersetsToJSON(value['union']),
        'intersection': UsersetsToJSON(value['intersection']),
        'difference': DifferenceToJSON(value['difference']),
    };
}

