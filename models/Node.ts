/* tslint:disable */
/* eslint-disable */
/**
 * OpenFGA
 * A high performance and flexible authorization/permission engine built for developers and inspired by Google Zanzibar.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@openfga.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Leaf } from './Leaf';
import {
    LeafFromJSON,
    LeafFromJSONTyped,
    LeafToJSON,
} from './Leaf';
import type { Nodes } from './Nodes';
import {
    NodesFromJSON,
    NodesFromJSONTyped,
    NodesToJSON,
} from './Nodes';
import type { UsersetTreeDifference } from './UsersetTreeDifference';
import {
    UsersetTreeDifferenceFromJSON,
    UsersetTreeDifferenceFromJSONTyped,
    UsersetTreeDifferenceToJSON,
} from './UsersetTreeDifference';

/**
 * 
 * @export
 * @interface Node
 */
export interface Node {
    /**
     * 
     * @type {string}
     * @memberof Node
     */
    name: string;
    /**
     * 
     * @type {Leaf}
     * @memberof Node
     */
    leaf?: Leaf;
    /**
     * 
     * @type {UsersetTreeDifference}
     * @memberof Node
     */
    difference?: UsersetTreeDifference;
    /**
     * 
     * @type {Nodes}
     * @memberof Node
     */
    union?: Nodes;
    /**
     * 
     * @type {Nodes}
     * @memberof Node
     */
    intersection?: Nodes;
}

/**
 * Check if a given object implements the Node interface.
 */
export function instanceOfNode(value: object): boolean {
    if (!('name' in value)) return false;
    return true;
}

export function NodeFromJSON(json: any): Node {
    return NodeFromJSONTyped(json, false);
}

export function NodeFromJSONTyped(json: any, ignoreDiscriminator: boolean): Node {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'leaf': json['leaf'] == null ? undefined : LeafFromJSON(json['leaf']),
        'difference': json['difference'] == null ? undefined : UsersetTreeDifferenceFromJSON(json['difference']),
        'union': json['union'] == null ? undefined : NodesFromJSON(json['union']),
        'intersection': json['intersection'] == null ? undefined : NodesFromJSON(json['intersection']),
    };
}

export function NodeToJSON(value?: Node | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'name': value['name'],
        'leaf': LeafToJSON(value['leaf']),
        'difference': UsersetTreeDifferenceToJSON(value['difference']),
        'union': NodesToJSON(value['union']),
        'intersection': NodesToJSON(value['intersection']),
    };
}

