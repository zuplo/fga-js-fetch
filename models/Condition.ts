/* tslint:disable */
/* eslint-disable */
/**
 * OpenFGA
 * A high performance and flexible authorization/permission engine built for developers and inspired by Google Zanzibar.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@openfga.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ConditionMetadata } from './ConditionMetadata';
import {
    ConditionMetadataFromJSON,
    ConditionMetadataFromJSONTyped,
    ConditionMetadataToJSON,
} from './ConditionMetadata';
import type { ConditionParamTypeRef } from './ConditionParamTypeRef';
import {
    ConditionParamTypeRefFromJSON,
    ConditionParamTypeRefFromJSONTyped,
    ConditionParamTypeRefToJSON,
} from './ConditionParamTypeRef';

/**
 * 
 * @export
 * @interface Condition
 */
export interface Condition {
    /**
     * 
     * @type {string}
     * @memberof Condition
     */
    name: string;
    /**
     * A Google CEL expression, expressed as a string.
     * @type {string}
     * @memberof Condition
     */
    expression: string;
    /**
     * A map of parameter names to the parameter's defined type reference.
     * @type {{ [key: string]: ConditionParamTypeRef; }}
     * @memberof Condition
     */
    parameters?: { [key: string]: ConditionParamTypeRef; };
    /**
     * 
     * @type {ConditionMetadata}
     * @memberof Condition
     */
    metadata?: ConditionMetadata;
}

/**
 * Check if a given object implements the Condition interface.
 */
export function instanceOfCondition(value: object): boolean {
    if (!('name' in value)) return false;
    if (!('expression' in value)) return false;
    return true;
}

export function ConditionFromJSON(json: any): Condition {
    return ConditionFromJSONTyped(json, false);
}

export function ConditionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Condition {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'expression': json['expression'],
        'parameters': json['parameters'] == null ? undefined : (mapValues(json['parameters'], ConditionParamTypeRefFromJSON)),
        'metadata': json['metadata'] == null ? undefined : ConditionMetadataFromJSON(json['metadata']),
    };
}

export function ConditionToJSON(value?: Condition | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'name': value['name'],
        'expression': value['expression'],
        'parameters': value['parameters'] == null ? undefined : (mapValues(value['parameters'], ConditionParamTypeRefToJSON)),
        'metadata': ConditionMetadataToJSON(value['metadata']),
    };
}

